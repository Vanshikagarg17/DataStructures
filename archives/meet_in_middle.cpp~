#include <stdio.h>
#include <algorithm>

using namespace std;

int set[] = {1,2,3,4,5};

int subset1[16];
int subset2[16];

int subset1_sum[1<<16];
int subset2_sum[1<<16];

int cnt;
void gen_sub(int sum, int idx, int subset[], int subsetsum[]){

    if( idx >= 16 ) {
        subsetsum[cnt++] = sum;
        return;
    }
    
    gen_sub(sum+subset[idx], idx+1, subset, subsetsum);
    gen_sub(sum, idx+1, subset, subsetsum);
}

int flag = 0;
void subset(int k, int idx, int sum){
    
    if( idx > 9) {
        if( sum % 2 == 0) {flag++;}
        return;
    }

    subset(k, idx+1, sum);
    subset(k, idx+1, sum+set[idx]);
}
int main(){
    int k = 10000;

    printf("size of set %d\t", (int)sizeof(set)/(int)sizeof(int));

    //generate half size two sets
    for(int i = 0; i < 32; i++) {
        if( i >= 16 ) subset2[i-16] = set[i];
        else subset1[i] = set[i];
    }

    //****** meet-in-the-middle technique
    /*cnt = 0;
    gen_sub(0, 0, subset1, subset1_sum);
    sort(subset1_sum, subset1_sum+(1<<16));
    printf("1st element %d\n", subset1_sum[0]);
    cnt = 0;
    gen_sub(0, 0, subset2, subset2_sum);
    sort(subset2_sum, subset2_sum+(1<<16));

    int low_ptr = 0, high_ptr = 1 << 16;
    while( true ) {
        int sum = subset1_sum[low_ptr] + subset2_sum[high_ptr]; 
        if( sum == k ) {printf("YES\n");return 0;}
        else if( sum > k ){
            high_ptr--;
        } else {
            low_ptr++;
        }
        if( low_ptr == (1<<16) || high_ptr == -1) {printf("NO\n"); return 0;}
    }
	*/
    //***** Brute force *****

   // flag = false;
   subset(k,0, 0);
   printf("flag = %d\n", flag);
   // else printf("NO\n");
 
    return 0;
}
